{"version":3,"sources":["Component/Navbar.js","Component/TextBox.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","togglemode","htmlFor","TextBox","useState","text","settext","style","color","heading","value","onChange","event","console","log","target","background","rows","on","newText","toUpperCase","showAlert","toLowerCase","split","join","length","trim","Alert","str","alert","role","charAt","slice","msg","App","setmode","setalert","message","setTimeout","aboutText","document","body","backgroundColor","brownMode","greenMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.36642b5d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n/* import { Link } from 'react-router-dom' */\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode === '#401b1b' ? 'dark' :props.mode} bg-'${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className='navbar-brand ' href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Home</a>\r\n            </li>\r\n\r\n          {/*   <li className=\"nav-item\">\r\n              < className=\"nav-link\" to=\"/about\">{props.aboutText}</>\r\n            </li>\r\n */}\r\n\r\n          </ul>\r\n          {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>*/}\r\n\r\n        {/*   <div className={`form-check form-check-inline text-${props.mode === '#401b1b' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"radio\" onClick={props.brownMode} name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\" />\r\n            <label className=\"form-check-label\" for=\"inlineRadio1\">Brown Mode</label>\r\n          </div>\r\n          <div className=\"form-check form-check-inline\">\r\n            <input className=\"form-check-input\" type=\"radio\" onClick={props.GreenMode} name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\" />\r\n            <label className=\"form-check-label\" for=\"inlineRadio2\">Green Mode</label>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}  >\r\n            <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string }\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextBox(props) {\r\n\r\n    const handleUpClick = () => {\r\n        console.log(\"The Buttton was clicked\" + text)\r\n        let newText = text.toUpperCase()\r\n        settext(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n    const handleLowClick = () => {\r\n        console.log(\"The Buttton was clicked\" + text)\r\n        let newText = text.toLowerCase()\r\n        settext(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n    const handleClearClick = () => {\r\n        console.log(\"The Buttton was clicked\" + text)\r\n        let newText = \" \"\r\n        settext(newText)\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log(\"on change\")\r\n        settext(event.target.value)\r\n    }\r\n    const removeSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        settext(newText.join(\" \"))\r\n\r\n\r\n    }\r\n  \r\n    const [text, settext] = useState('');\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className='container' style={{\r\n                color: (() => {\r\n                    switch (props.mode) {\r\n                        case \"#401b1b\": return 'white';\r\n                        case 'light': return '#070725';\r\n                        case \"dark\": return \"white\";\r\n                        default: return \"#FFFFFF\";\r\n                    }\r\n                })()\r\n            }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\"   >\r\n\r\n\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{\r\n                        color: (() => {\r\n                            switch (props.mode) {\r\n                                case \"#401b1b\": return 'white';\r\n                                case 'light': return 'black';\r\n                                case \"dark\": return \"white\";\r\n                                default: return \"#FFFFFF\";\r\n                            }\r\n                        })(), background: (() => {\r\n                            switch (props.mode) {\r\n                                case \"#401b1b\": return '#6d380b';\r\n                                case 'light': return 'white';\r\n                                case \"dark\": return \"grey\";\r\n                                default: return \"#FFFFFF\";\r\n                            }\r\n                        })()\r\n                    }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${(() => {\r\n        switch (props.mode) {\r\n          case \"#401b1b\":return 'secondary';\r\n          case 'light': return 'primary';\r\n          case \"dark\":  return \"primary\";\r\n          default:      return \"#FFFFFF\";\r\n        }\r\n      })()} mx-2`} on onClick={handleUpClick}>Convert to uppercase</button>\r\n                <button className={`btn btn-${(() => {\r\n        switch (props.mode) {\r\n          case \"#401b1b\":return 'secondary';\r\n          case 'light': return 'primary';\r\n          case \"dark\":  return \"primary\";\r\n          default:      return \"#FFFFFF\";\r\n        }\r\n      })()} mx-2`} on onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button className={`btn btn-${(() => {\r\n        switch (props.mode) {\r\n          case \"#401b1b\":return 'secondary';\r\n          case 'light': return 'primary';\r\n          case \"dark\":  return \"primary\";\r\n          default:      return \"#FFFFFF\";\r\n        }\r\n      })()} mx-2`} on onClick={handleClearClick}>Clear Text</button>\r\n                <button className={`btn btn-${(() => {\r\n        switch (props.mode) {\r\n          case \"#401b1b\":return 'secondary';\r\n          case 'light': return 'primary';\r\n          case \"dark\":  return \"primary\";\r\n          default:      return \"#FFFFFF\";\r\n        }\r\n      })()} mx-2`}\r\n\r\n                    on onClick={removeSpaces}>Remove spaces</button>\r\n            </div>\r\n\r\n            <div className=\"container   my-3\" style={{ color: props.mode === 'light' ? '#070725' : 'white' }}>\r\n                <h1>\r\n                    Your text Summary\r\n                </h1>\r\n                <p>\r\n                    This text has {text.length===0?\"0\":text.trim().split(\" \").length} word and {text.length} Characterds\r\n                </p>\r\n                <p>\r\n                    This is {.008 * text.length} Minutes read\r\n                </p>\r\n                <h2>\r\n                    Preview\r\n                </h2>\r\n                <p>\r\n                    {text.length === 0 ? \"Enter something in textbox to preview here\" : text}\r\n                </p>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(str)=>{\r\n        let text\r\n        text=str.charAt(0).toUpperCase()+str.slice(1);\r\n        return text;\r\n\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong> {capitalize(props.alert.type)} {props.alert.msg}</strong>\r\n               \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './Component/Navbar';\nimport TextBox from './Component/TextBox';\n/* import About from './Component/About'; */\nimport React, { useState } from 'react'\nimport Alert from './Component/Alert';\n/* import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"; */\n\n\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\")\n  const [alert, setalert] = useState(null)\n  const showAlert = (message, type) => {\n    setalert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n\n  }\n  const togglemode = () => {\n    if (mode === \"dark\") {\n      setmode(\"light\");\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Dark mode successfully enabled \", \"success\")\n      document.title = \"TextUtil-LIGHT\"\n    }\n    else {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = '#070725'\n      showAlert(\"Light mode successfully enabled \", \"success\")\n      document.title = \"TextUtil-DARK\"\n    }\n  }\n  const brownMode = () => {\n    setmode(\"#401b1b\")\n    document.body.style.backgroundColor = 'grey'\n    showAlert(\"Brown mode successfully enabled \", \"success\")\n\n  }\n  const greenMode = () => {\n    setmode(\"#073a07\")\n    document.body.style.backgroundColor = 'green'\n    showAlert(\"Green mode successfully enabled \", \"success\")\n\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" aboutText='About TextUtils' mode={mode} togglemode={togglemode} brownMode={brownMode} greenMode={greenMode} />\n        <Alert alert={alert} />\n\n\n        <div className=\"container\">\n          \n           {/*  <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n\n\n            {/* <Router exact path=\"/\"> */}\n              <TextBox heading=\"Enter text below\" mode={mode} showAlert={showAlert} />\n            {/* </Router> */}\n          \n        </div>\n      {/* </Router> */}\n\n    </>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}